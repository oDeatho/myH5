1. 数据类型：
    JS不区分 证书和浮点数.
    比较运算符有 1> == 他会自动转换数据类型再比较
                 2> === 他不会转换数据类型, 如果类型不一致 返回false.
                 所以坚持使用===比较.
                 
        NaN这个特殊Number和其他值都不想等, 包括自己.
        判断Nan的方法是通过isNaN()函数
    
    如果一个变量没有通过var生命, 就默认认为是全局变量.
    为了强制使用var定义变量. 在js代码第一行协商 'use strict'
    
    数组
    new Array(1, 2, 3);
    var arr = [1, 2, "hello"];
    arr[6]  undefined
    
    数组长度为 arr.length, 可以通过修改这个改变数组长度,
    var arr = [1, 2, 3];
    arr[5] = 'x';
    arr; // arr变为[1, 2, 3, undefined, undefined, 'x']
    如果越界赋值 也会有奇怪的效果哦(见上)
    
    对象:
    var person = {
        hello: "hello",
        "hi": 20,
    };
    
    访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用''括起来：

    var xiaohong = {
        name: '小红',
        'middle-school': 'No.1 Middle School'
    };
    这个属性使用也只能通过[''] 而不能通过. 来使用.
    

    
    多行字符串用反引号 `可以换行`
    
    以及模板字符串格式化, 这里必须要使用反引号哦
    var name = "hello"
    var age = 20;
    var message = `hello , ${name}, ${age}`;

    MAP和SET
    但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。
    为了解决这个问题，最新的ES6规范引入了新的数据类型Map。
    
    var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);
    m.get('Michael'); // 95
    初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：

    var m = new Map(); // 空Map
    m.set('Adam', 67); // 添加新的key-value
    m.set('Bob', 59);
    m.has('Adam'); // 是否存在key 'Adam': true
    m.get('Adam'); // 67
    m.delete('Adam'); // 删除key 'Adam'
    m.get('Adam'); // undefined
    
    
    要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set：

    var s1 = new Set(); // 空Set
    var s2 = new Set([1, 2, 3]); // 含1, 2, 3
    重复元素在Set中自动被过滤：

    var s = new Set([1, 2, 3, 3, '3']);
    s; // Set {1, 2, 3, "3"}
    注意数字3和字符串'3'是不同的元素。
    
    
    遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。

    具有iterable类型的集合可以通过新的for ... of循环来遍历。
    
2. 控制流
   if else 同C
   
   循环:
   for 循环 有两种, 
   var x = 0;
   var i;
   for (i = 1; i <= 1000; i++){
       x = x + 1;
   }
   这种也可以写成C++的样子.(在括号内定义i)
   另一种 for in
   var o = {
       name: 'Jack',
       age: 20,
       city: 'Beijing'
   };
   for (var key in o) {
       console.log(key); // 'name', 'age', 'city'
   }
   这种可以类似python的方式 只是加上括号
   而且 for in 数组时, 循环得到的是String类型而不是Number,
   而且for in 由于历史遗留问题, 他遍历的实际上是对象的属性名称.
   for of 修复了该问题.
   
   还有for of 具有iterable的类型可以通过for..of来遍历
   
   但是最好用iterable内置的forEach方法.
   
   while循环 同C
   do while 同C;
   
3. 函数
    1> 定义 function abs(x){
                if (x >= 0){
                    return x;
                {
                return -x;
            }
    如果没有return, 返回结果为undefined.
    而且也可以
    var abs = function (x) {
        if (x >= 0) {
            return x;
        } else {
            return -x;
        }
    };
    (ps: 这里要加分号表示赋值语句结束).
    
    JS 允许传入任意个参数不影响调用.
    关键字arguments, 只在函数内部起作用, 永远指向当前函数的调用者传入的所有参数.
    
    为了获取额外的参数
    ES6标准引入了rest参数,
    eg:
    
    function foo(a, b, ...rest) {
        console.log('a = ' + a);
        console.log('b = ' + b);
        console.log(rest);
    }

    foo(1, 2, 3, 4, 5);
    // 结果:
    // a = 1
    // b = 2
    // Array [ 3, 4, 5 ]

    foo(1);
    // 结果:
    // a = 1
    // b = undefined
    // Array []
    
    小心return语句
    JS引擎会在行末添加分号的机制, 这可能有坑.
    return { hello: "hello"};
    和
    return 
        {hello: "hello"};
    不一样哦!
    所以多行的正确写法是
    return {
        hello: "hello";
    }
    
    2> 变量提升
    JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部
    但只是提升声明, 并不提升赋值.
    所以需要严格遵守 "在函数内部首先申明所有变量"
    
    3> 全局作用域
    不在任何函数内定义的变量具有全局作用域, js默认有一个全局对象 window
    所以函数实际上也是一个全局变量.
    fun()和window.fun() 相同哟.
    
    4> 名字空间
    减少冲突的一个方法就是把 所有的变量和函数全部绑定到一个全局变量.
    
    5> 局部作用域
    js的变量作用域实际上是函数内部, 所以在for循环中无法定义块的作用域
    
    ES6引入了新的关键字 let来解决此问题.
    'use strict';

    function foo() {
        var sum = 0;
        for (let i=0; i<100; i++) {
            sum += i;
        }
        // SyntaxError:
        i += 1;
    }
    
    6> 常量
    由于var和let申明的是变量，如果要申明一个常量，在ES6之前是不行的，我们通常用全部大写的变量来表示“这是一个常量，不要修改它的值”：

    var PI = 3.14;
    ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域：

    'use strict';

    const PI = 3.14;
    PI = 3; // 某些浏览器不报错，但是无效果！
    PI; // 3.14
    
    7> 解构赋值
    var [x, y, z] = ['hello', 'JavaScript', 'ES6'];
    
    使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为undefined，这和引用一个不存在的属性获得undefined是一致的。
    如果要使用的变量名和属性名不一致，可以用下面的语法获取：

    var person = {
        name: '小明',
        age: 20,
        gender: 'male',
        passport: 'G-12345678',
        school: 'No.4 middle school'
    };

    // 把passport属性赋值给变量id:
    let {name, passport, id} = person;
    name; // '小明'
    id; // 'G-12345678'
    // 注意: passport不是变量，而是为了让变量id获得passport属性:
    passport; // Uncaught ReferenceError: passport is not defined
    
    解构赋值还可以使用默认值，这样就避免了不存在的属性返回undefined的问题：

    var person = {
        name: '小明',
        age: 20,
        gender: 'male',
        passport: 'G-12345678'
    };

    // 如果person对象没有single属性，默认赋值为true:
    var {name, single=true} = person;
    name; // '小明'
    single; // true
    
4. 方法
    0> callee 属性. 虽然arguments 的主要用途是保存函数参数，
       但这个对象还有一个名叫callee 的属性，该属性是一个指针，指向拥有这个arguments 对象的函数。
    1> this  是个大坑. 默认指向 看情况而定. use strict后 指向undefined
       利用2>中代码
       var hello = xiaoming.age;
       hello()
       这里并不会返回25而是返回NaN. 要注意函数是个对象, 实际上只有一份代码. 持有一个引用.

       即使是在不同的环境中执行，全局的sayColor()函数与o.sayColor()指向的仍然是同一个函数。
    2> apply 
        将函数对象绑定到某个对象上. 
        可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。

        用apply修复getAge()调用：

        function getAge() {
            var y = new Date().getFullYear();
            return y - this.birth;
        }

        var xiaoming = {
            name: '小明',
            birth: 1990,
            age: getAge
        };


        xiaoming.age(); // 25
        getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空
        
        另一个与apply()类似的方法是call()，唯一区别是：

        apply()把参数打包成Array再传入；

        call()把参数按顺序传入。
        
        Math.max.apply(null, [3, 5, 4]); // 5
        Math.max.call(null, 3, 5, 4); // 5
        对普通函数调用，我们通常把this绑定为null。
    3> bind方法
        window.color = "red";
        var o = { color: "blue" };
        function sayColor(){
        alert(this.color);
        }
        var objectSayColor = sayColor.bind(o);
        objectSayColor(); //blue
5. 闭包
    同python
    理论上讲，创建一个匿名函数并立刻执行可以这么写：

    function (x) { return x * x } (3);
    但是由于JavaScript语法解析的问题，会报SyntaxError错误，因此需要用括号把整个函数定义括起来：

    (function (x) { return x * x }) (3);

6. 箭头函数
    x => x * x
    相当于
    function (x) {
        return x * x;
    }
    同 python lambda表达式.
    
    但是这里箭头函数不同与匿名函数是因为箭头函数的this是词法作用域, 根据上下文决定.
    所以不会出现绑定错误的情况.

7. 生成器
    yield 同python
    不过
    generator定义为:
    function* foo(x) {
        yield x + 1;
        yield x + 2;
        return x + 3;
    }
    是function* 定义哟.

8. 标准对象:
    js里一切皆对象.
    
    ECMAScript 中有两种属性：数据属性和访问器属性。
    1>数据属性:
     [[Configurable]]：表示能否通过delete 删除属性从而重新定义属性，能否修改属性的特
性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的
这个特性默认值为true。
 [[Enumerable]]：表示能否通过for-in 循环返回属性。像前面例子中那样直接在对象上定
义的属性，它们的这个特性默认值为true。
 [[Writable]]：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的
这个特性默认值为true。
 [[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，
把新值保存在这个位置。这个特性的默认值为undefined。

    通过defineProperty函数来实现
    eg:
    var person = {};
    Object.defineProperty(person, "name", {
            writable: false,
            value: "Nicholas"
    });
    alert(person.name); //"Nicholas"
    person.name = "Greg";
    alert(person.name); //"Nicholas"
    
    2>访问器属性
    [[Configurable]]：表示能否通过delete 删除属性从而重新定义属性，能否修改属性的特
性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为
true。
 [[Enumerable]]：表示能否通过for-in 循环返回属性。对于直接在对象上定义的属性，这
个特性的默认值为true。
 [[Get]]：在读取属性时调用的函数。默认值为undefined。
 [[Set]]：在写入属性时调用的函数。默认值为undefined。

var book = {
    _year: 2004,
    edition: 1
};
Object.defineProperty(book, "year", {
    get: function(){
        return this._year;
    },
    set: function(newValue){
        if (newValue > 2004) {
            this._year = newValue;
            this.edition += newValue - 2004;
        }
    }
});
book.year = 2005;
alert(book.edition); //2
这是使用访问器属性的常见方式，即设置一个属性的值会导致其他属性发生变化。

旧写法
var book = {
    _year: 2004,
    edition: 1
};
//定义访问器的旧有方法
book.__defineGetter__("year", function(){
    eturn this._year;
});
book.__defineSetter__("year", function(newValue){
    if (newValue > 2004) {
        this._year = newValue;
        this.edition += newValue - 2004;
}
});
book.year = 2005;
alert(book.edition); //2
在不支持Object.defineProperty() 方法的浏览器中不能修改[[Configurable]] 和
[[Enumerable]]。

    创建对象
    1. 工厂模式: 
    function createPerson(name, age, job){
        var o = new Object();
        o.name = name;
        o.age = age;
        o.job = job;
        o.sayName = function(){
            alert(this.name);
        };
        return o;
    }
    var person1 = createPerson("Nicholas", 29, "Software Engineer");
    var person2 = createPerson("Greg", 27, "Doctor");

    工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型)


    构造函数模式
    function Person(name, age, job){
        this.name = name;
        this.age = age;
        this.job = job;
        this.sayName = function(){
            alert(this.name);
        };
    }
    var person1 = new Person("Nicholas", 29, "Software Engineer");
    var person2 = new Person("Greg", 27, "Doctor");
    没有显式地创建对象；
    直接将属性和方法赋给了this 对象；
    没有return 语句。
    

    构造函数的问题
    因此每定义一个函数，也就是实例化了一个对象。
    
    上面alert(person1.sayName == person2.sayName); //false
    
    
    function Person(name, age, job){
        this.name = name;
        this.age = age;
        this.job = job;
        this.sayName = sayName;
        }
        function sayName(){
            alert(this.name);
    }
    var person1 = new Person("Nicholas", 29, "Software Engineer");
    var person2 = new Person("Greg", 27, "Doctor");
    
    
    原型模式
    